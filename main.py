import asyncio
import os
import logging
from typing import Dict

from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from fastapi import FastAPI
from TikTokLive import TikTokLiveClient
import httpx

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("dobabob")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID_STR = os.getenv("CHAT_ID")

if not TELEGRAM_TOKEN or not CHAT_ID_STR:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ CHAT_ID")
    raise SystemExit(1)

try:
    CHAT_ID = int(CHAT_ID_STR)
except ValueError:
    logger.error("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    raise SystemExit(1)

USERNAMES = ["lvbliss2", "bliss_nt", "lv.bliss", "n3v3rdie1"]
user_status: Dict[str, bool] = {u: False for u in USERNAMES}
monitor_tasks: Dict[str, asyncio.Task] = {}

# ---------------- Telegram ----------------
bot = Bot(
    token=TELEGRAM_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
router = Router()
dp = Dispatcher()
dp.include_router(router)


@router.message(Command("start"))
async def handle_start_command(message: Message):
    # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–≤–æ–µ–º—É —á–∞—Ç—É
    if message.chat.id != CHAT_ID:
        return

    parts = []
    for u in USERNAMES:
        status = user_status.get(u)
        emoji = "‚ùì" if status is None else ("üî¥" if status else "‚ö™Ô∏è")
        text_status = "–≤ —ç—Ñ–∏—Ä–µ" if status else "–Ω–µ –≤ —ç—Ñ–∏—Ä–µ"
        parts.append(f"{emoji} {u} ‚Äî {text_status}\nhttps://www.tiktok.com/@{u}/live")
    await message.answer("\n\n".join(parts), disable_web_page_preview=True)


# ---------------- TikTok Monitor ----------------
async def monitor_user(username: str):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TikTok —Å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –∫–ª–∏–µ–Ω—Ç–∞"""
    while True:
        try:
            client = TikTokLiveClient(unique_id=username)
            while True:
                try:
                    is_live = await client.is_live()
                except httpx.TimeoutException:
                    logger.warning("%s: timeout, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 10—Å", username)
                    await asyncio.sleep(10)
                    continue
                except Exception as e:
                    logger.warning("%s: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ (%s), –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞", username, e)
                    break  # –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º client

                prev = user_status.get(username)
                if is_live and not prev:
                    user_status[username] = True
                    await bot.send_message(
                        CHAT_ID,
                        f"üî¥ {username} –Ω–∞—á–∞–ª —ç—Ñ–∏—Ä!\nhttps://www.tiktok.com/@{username}/live"
                    )
                elif not is_live and prev:
                    user_status[username] = False
                    await bot.send_message(
                        CHAT_ID,
                        f"‚ö™Ô∏è {username} –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ñ–∏—Ä."
                    )
                await asyncio.sleep(10)
        except Exception as e:
            logger.exception("%s: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ %s", username, e)
        finally:
            # –∂–¥—ë–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(15)


# ---------------- FastAPI ----------------
app = FastAPI()


@app.get("/ping")
async def ping():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤—ã –ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    dead_users = [u for u, t in monitor_tasks.items() if t.done()]
    if dead_users:
        return {"status": "error", "dead_monitors": dead_users}
    return {"status": "ok"}


async def run_server():
    import uvicorn
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    await server.serve()


# ---------------- Main ----------------
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for u in USERNAMES:
        task = asyncio.create_task(monitor_user(u), name=f"monitor-{u}")
        monitor_tasks[u] = task

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –∏ HTTP —Å–µ—Ä–≤–µ—Ä
    await asyncio.gather(
        dp.start_polling(bot),
        run_server(),
        *monitor_tasks.values(),
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

